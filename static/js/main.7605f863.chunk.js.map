{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleChange","e","name","target","value","type","setState","Object","defineProperty","handleAdd","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","onChange","placeholder","id","htmlFor","min","max","onClick","toUpperCase","Component","Task","_props$task","task","active","important","finishDate","status","delete","finishTime","toLocaleString","TaskList","tasks","filter","deactive","sort","b","toLowerCase","activeTasks","map","src_components_Task","key","deactiveTasks","Fragment","App","counter","deleteTask","toConsumableArray","changeTaskStatus","forEach","getTime","addTask","priority","actualTasks","flag","item","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7605f863.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n  handleChange = e => {\r\n    const name = e.target.name;\r\n    let value = e.target.value;\r\n    const type = e.target.type;\r\n\r\n    if (type === \"checkbox\") value = e.target.checked;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n  handleAdd = () => {\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 0) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"Enter the task\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          name=\"text\"\r\n          onChange={this.handleChange}\r\n          type=\"text\"\r\n          placeholder=\"add task \"\r\n          value={this.state.text}\r\n        ></input>\r\n        <div className=\"priority\">\r\n          <input\r\n            name=\"checked\"\r\n            onChange={this.handleChange}\r\n            id=\"priority\"\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n          ></input>\r\n          <label htmlFor=\"priority\">Priority</label>\r\n        </div>\r\n\r\n        <div className=\"date\">\r\n          <label htmlFor=\"date\"> Lead time</label>\r\n          <input\r\n            name=\"date\"\r\n            onChange={this.handleChange}\r\n            id=\"date\"\r\n            type=\"date\"\r\n            value={this.state.date}\r\n            min={this.minDate}\r\n            max={maxDate}\r\n          ></input>\r\n        </div>\r\n\r\n        <button className=\"add\" onClick={this.handleAdd}>\r\n          {\"Add\".toUpperCase()}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\nimport \"./Task.css\";\r\n\r\nconst Task = props => {\r\n  const { id, text, date, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"activeTask\">\r\n        <p>\r\n          <strong className={important ? \"priority\" : \"\"}>{text}</strong>\r\n          to <span>{date}</span>\r\n          <button onClick={() => props.status(id)}>\r\n            {\"Done\".toUpperCase()}\r\n          </button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finishTime = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div className=\"deactiveTask\">\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> to {date}</em>\r\n          <span> Completed: {finishTime}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport \"./TaskList.css\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n  const deactive = props.tasks.filter(task => !task.active);\r\n\r\n  if (deactive.length >= 2) {\r\n    deactive.sort((a, b) => b.finishDate - a.finishDate);\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n      if (a.text < b.text) {\r\n        return -1;\r\n      } else if (a.text > b.text) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      status={props.status}\r\n      delete={props.delete}\r\n    />\r\n  ));\r\n  const deactiveTasks = deactive.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      status={props.status}\r\n      delete={props.delete}\r\n    />\r\n  ));\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>{\"Tasks to do\".toUpperCase()}</h1>\r\n        {activeTasks.length > 0 ? (\r\n          activeTasks\r\n        ) : (\r\n          <p>Well done, time for break</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"deactive\">\r\n        <h3>\r\n          {\"Done\".toUpperCase()} {deactiveTasks.length}\r\n        </h3>\r\n        {deactiveTasks.length > 5 && <span>Last 5 tasks</span>}\r\n        {deactiveTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    tasks: []\n  };\n  counter = this.state.tasks.length;\n\n  deleteTask = id => {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks\n    });\n  };\n  changeTaskStatus = id => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n  addTask = (text, date, priority) => {\n    const actualTasks = [...this.state.tasks];\n    let flag = false;\n    actualTasks.forEach(item => {\n      if (item.text === text) {\n        return (flag = true);\n      }\n    });\n    if (flag) {\n      alert(\"Exist\");\n    } else {\n      const task = {\n        id: this.counter,\n        text,\n        date,\n        important: priority,\n        active: true,\n        finishDate: null\n      };\n      this.counter++;\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, task]\n      }));\n      return true;\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>{\"Add your tasks\".toUpperCase()}</h2>\n        <AddTask add={this.addTask} tasks={this.state.tasks} />\n        <TaskList\n          tasks={this.state.tasks}\n          status={this.changeTaskStatus}\n          delete={this.deleteTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}